name: Error Monitoring

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 */6 * * *'  # Ex√©cut√© toutes les 6 heures

# Ajout des permissions n√©cessaires
permissions:
  contents: read
  issues: write


  # D√©finir les variables d'environnement
env:
  # URL de l'application d√©ploy√©e (√† modifier selon votre URL de d√©ploiement)
  VERCEL_URL: 'au-roi-lion-e6sz0snmo-eloijhns-projects.vercel.app'
  # Domaine personnalis√© (comment√©, d√©commentez pour l'utiliser √† la place)
  # VERCEL_URL: 'www.aurolion.com'

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for new errors
        id: error-check
        run: |
          # V√©rifier les nouveaux logs d'erreur
          if [ -f "error.log" ]; then
            # Comparer avec les erreurs d√©j√† connues
            ERROR_HASH=$(md5sum error.log | cut -d ' ' -f 1)
            echo "error_hash=$ERROR_HASH" >> $GITHUB_OUTPUT
            
            # V√©rifier si l'erreur est nouvelle
            if [ ! -f ".error_hash" ] || [ "$(cat .error_hash)" != "$ERROR_HASH" ]; then
              echo "new_errors=true" >> $GITHUB_OUTPUT
              ERROR_CONTENT=$(tail -n 20 error.log)
              echo "error_content<<EOF" >> $GITHUB_OUTPUT
              echo "$ERROR_CONTENT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "$ERROR_HASH" > .error_hash
            else
              echo "new_errors=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "new_errors=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Issue for new errors
        if: steps.error-check.outputs.new_errors == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const errorContent = process.env.ERROR_CONTENT;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Nouvelles erreurs d√©tect√©es dans l\'application',
              body: `Des nouvelles erreurs ont √©t√© d√©tect√©es dans l'application. Voici les derni√®res entr√©es du log :\n\`\`\`\n${errorContent}\n\`\`\`\n\nVerification effectu√©e le ${new Date().toISOString()}.`,
              labels: ['bug', 'automated-report']
            });
            console.log('Issue cr√©√©e pour les nouvelles erreurs');

      - name: Application Health Check
        id: health-check
        run: |
          # D√©finir l'URL compl√®te de l'application
          DEPLOY_URL="https://${VERCEL_URL}"
          echo "V√©rification de l'application √† l'URL: $DEPLOY_URL"
          
          # V√©rifier d'abord si l'application est d√©ploy√©e
          DEPLOYMENT_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $DEPLOY_URL || echo "failed")
          
          if [[ "$DEPLOYMENT_CHECK" == "404" && $(curl -s $DEPLOY_URL | grep -c "DEPLOYMENT_NOT_FOUND") -gt 0 ]]; then
            echo "deployment_exists=false" >> $GITHUB_OUTPUT
            echo "health_error=false" >> $GITHUB_OUTPUT
            echo "health_status=deployment_not_found" >> $GITHUB_OUTPUT
            echo "L'application n'est pas encore d√©ploy√©e sur Vercel, ignorant la v√©rification de sant√©."
          else
            # V√©rifier la sant√© de l'application 
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $DEPLOY_URL/api/health || echo "failed")
            echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
            echo "deployment_exists=true" >> $GITHUB_OUTPUT
            echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            
            if [[ "$HEALTH_STATUS" != "200" ]]; then
              echo "health_error=true" >> $GITHUB_OUTPUT
            else
              echo "health_error=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create GitHub Issue for health check failure
        if: steps.health-check.outputs.health_error == 'true' && steps.health-check.outputs.deployment_exists == 'true'
        env:
          HEALTH_STATUS: ${{ steps.health-check.outputs.health_status }}
          DEPLOY_URL: ${{ steps.health-check.outputs.deploy_url }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = process.env.HEALTH_STATUS;
            const deployUrl = process.env.DEPLOY_URL;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üî¥ Probl√®me d√©tect√© sur l\'application',
              body: `Le health check a √©chou√© avec le statut: ${status}\n\nURL v√©rifi√©e: ${deployUrl}/api/health\n\nV√©rification effectu√©e le ${new Date().toISOString()}.`,
              labels: ['bug', 'high-priority', 'automated-report']
            });
            console.log('Issue cr√©√©e pour le probl√®me de health check'); 